From 8a4400697822eff8f902931ac84b7c89fe4b409e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E9=BB=84=E5=AD=90=E6=87=BF?=
 <huangziyi@canaan-creative.com>
Date: Mon, 2 Sep 2024 09:33:52 +0800
Subject: [PATCH] modify lt9611 for k230
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: 黄子懿 <huangziyi@canaan-creative.com>
---
 drivers/gpu/drm/bridge/lontium-lt9611.c | 811 +++++++++++++-----------
 1 file changed, 437 insertions(+), 374 deletions(-)

diff --git a/drivers/gpu/drm/bridge/lontium-lt9611.c b/drivers/gpu/drm/bridge/lontium-lt9611.c
index 89bdd938757e..f2124668c22d 100644
--- a/drivers/gpu/drm/bridge/lontium-lt9611.c
+++ b/drivers/gpu/drm/bridge/lontium-lt9611.c
@@ -4,23 +4,23 @@
  * Copyright (c) 2019-2020. Linaro Limited.
  */
 
+#include "drm/drm_connector.h"
 #include <linux/gpio/consumer.h>
-#include <linux/i2c.h>
 #include <linux/interrupt.h>
-#include <linux/media-bus-format.h>
 #include <linux/module.h>
 #include <linux/of_graph.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
 #include <linux/regulator/consumer.h>
-
-#include <sound/hdmi-codec.h>
+#include <linux/i2c.h>
 
 #include <drm/drm_atomic_helper.h>
 #include <drm/drm_bridge.h>
 #include <drm/drm_mipi_dsi.h>
-#include <drm/drm_of.h>
 #include <drm/drm_print.h>
+#include <drm/drm_crtc_helper.h>
+#include <drm/drm_edid.h>
+#include <drm/drm_connector.h>
 #include <drm/drm_probe_helper.h>
 
 #define EDID_SEG_SIZE	256
@@ -31,10 +31,27 @@
 
 #define LT9611_4LANES	0
 
+#if 0
+// for debug
+static int debug_regmap_multi_write(struct regmap *m, const struct reg_sequence *regs, int num_regs) {
+	for (unsigned i = 0; i < num_regs; i++) {
+		printk("w %04x %02x\n", regs[i].reg, regs[i].def);
+	}
+	return regmap_multi_reg_write(m, regs, num_regs);
+}
+static int debug_regmap_write(struct regmap *map, unsigned int reg, unsigned int val) {
+	printk("w %04x %02x\n", reg, val);	
+	return regmap_write(map, reg, val);
+}
+#define regmap_multi_reg_write debug_regmap_multi_write
+#define regmap_write debug_regmap_write
+#endif
+
 struct lt9611 {
 	struct device *dev;
 	struct drm_bridge bridge;
-	struct drm_bridge *next_bridge;
+	struct drm_connector connector;
+	struct drm_display_mode mode;
 
 	struct regmap *regmap;
 
@@ -59,6 +76,8 @@ struct lt9611 {
 	enum drm_connector_status status;
 
 	u8 edid_buf[EDID_SEG_SIZE];
+	u32 vic;
+	u32 pcr_m;
 };
 
 #define LT9611_PAGE_CONTROL	0xff
@@ -84,18 +103,46 @@ static const struct regmap_config lt9611_regmap_config = {
 	.num_ranges = ARRAY_SIZE(lt9611_ranges),
 };
 
+struct lt9611_mode {
+	u16 hdisplay;
+	u16 vdisplay;
+	u8 vrefresh;
+	u8 lanes;
+	u8 intfs;
+};
+
+static struct lt9611_mode lt9611_modes[] = {
+	//{ 3840, 2160, 30, 4, 2 }, /* 3840x2160 24bit 30Hz 4Lane 2ports */
+	{ 1920, 1080, 60, 4, 1 }, /* 1080P 24bit 60Hz 4lane 1port */
+	{ 1920, 1080, 30, 4, 1 }, /* 1080P 24bit 30Hz 4lane 1port */
+	// { 1280, 720, 60, 4, 1 },
+	// { 1280, 720, 50, 4, 1 },
+	// { 720, 480, 60, 4, 1 },
+	// { 720, 576, 50, 2, 1 },
+	// { 640, 480, 60, 2, 1 },
+};
+
 static struct lt9611 *bridge_to_lt9611(struct drm_bridge *bridge)
 {
 	return container_of(bridge, struct lt9611, bridge);
 }
 
+static struct lt9611 *connector_to_lt9611(struct drm_connector *connector)
+{
+	return container_of(connector, struct lt9611, connector);
+}
+
 static int lt9611_mipi_input_analog(struct lt9611 *lt9611)
 {
 	const struct reg_sequence reg_cfg[] = {
-		{ 0x8106, 0x40 }, /* port A rx current */
+		{ 0x8106, 0x60 }, /* port A rx current */
+		{ 0x8107, 0x3f }, /* port A rx current */
+		{ 0x8108, 0x3f }, /* port A rx current */
 		{ 0x810a, 0xfe }, /* port A ldo voltage set */
 		{ 0x810b, 0xbf }, /* enable port A lprx */
-		{ 0x8111, 0x40 }, /* port B rx current */
+		{ 0x8111, 0x60 }, /* port B rx current */
+		{ 0x8112, 0x3f }, /* port B rx current */
+		{ 0x8113, 0x3f }, /* port B rx current */
 		{ 0x8115, 0xfe }, /* port B ldo voltage set */
 		{ 0x8116, 0xbf }, /* enable port B lprx */
 
@@ -110,16 +157,26 @@ static int lt9611_mipi_input_digital(struct lt9611 *lt9611,
 				     const struct drm_display_mode *mode)
 {
 	struct reg_sequence reg_cfg[] = {
-		{ 0x8300, LT9611_4LANES },
-		{ 0x830a, 0x00 },
-		{ 0x824f, 0x80 },
-		{ 0x8250, 0x10 },
-		{ 0x8302, 0x0a },
-		{ 0x8306, 0x0a },
+		// { 0x8300, LT9611_4LANES },
+		// { 0x830a, 0x00 },
+		// { 0x824f, 0x80 },
+		// { 0x8250, 0x10 },
+		// { 0x8303, 0x00 },
+		// { 0x8302, 0x08 },
+		// { 0x8306, 0x08 },
+		{0x8250, 0x14},
+		{0x8300, 0x60},
+		{0x8303, 0x4f},
+		{0x8304, 0x00},
+		{0x8307, 0x40},
+		{0x824f, 0x80},
+		{0x8302, 0x08},
+		{0x8306, 0x08},
+		{0x830a, 0x00}
 	};
 
-	if (lt9611->dsi1_node)
-		reg_cfg[1].def = 0x03;
+	if (mode->hdisplay == 3840)
+		reg_cfg[8].def = 0x03;
 
 	return regmap_multi_reg_write(lt9611->regmap, reg_cfg, ARRAY_SIZE(reg_cfg));
 }
@@ -136,12 +193,23 @@ static void lt9611_mipi_video_setup(struct lt9611 *lt9611,
 	hactive = mode->hdisplay;
 	hsync_len = mode->hsync_end - mode->hsync_start;
 	hfront_porch = mode->hsync_start - mode->hdisplay;
-	hsync_porch = mode->htotal - mode->hsync_start;
+	hsync_porch = hsync_len + mode->htotal - mode->hsync_end;
 
 	vactive = mode->vdisplay;
 	vsync_len = mode->vsync_end - mode->vsync_start;
 	vfront_porch = mode->vsync_start - mode->vdisplay;
-	vsync_porch = mode->vtotal - mode->vsync_start;
+	vsync_porch = vsync_len + mode->vtotal - mode->vsync_end;
+
+	dev_info(lt9611->dev, "h_total: %u\n", h_total);
+	dev_info(lt9611->dev, "hactive: %u\n", hactive);
+	dev_info(lt9611->dev, "hsync_len: %u\n", hsync_len);
+	dev_info(lt9611->dev, "hfront_porch: %u\n", hfront_porch);
+	dev_info(lt9611->dev, "hsync_porch: %u\n", hsync_porch);
+	dev_info(lt9611->dev, "v_total: %u\n", v_total);
+	dev_info(lt9611->dev, "vactive: %u\n", vactive);
+	dev_info(lt9611->dev, "vsync_len: %u\n", vsync_len);
+	dev_info(lt9611->dev, "vfront_porch: %u\n", vfront_porch);
+	dev_info(lt9611->dev, "vsync_porch: %u\n", vsync_porch);
 
 	regmap_write(lt9611->regmap, 0x830d, (u8)(v_total / 256));
 	regmap_write(lt9611->regmap, 0x830e, (u8)(v_total % 256));
@@ -164,14 +232,12 @@ static void lt9611_mipi_video_setup(struct lt9611 *lt9611,
 
 	regmap_write(lt9611->regmap, 0x8319, (u8)(hfront_porch % 256));
 
-	regmap_write(lt9611->regmap, 0x831a, (u8)(hsync_porch / 256) |
-						((hfront_porch / 256) << 4));
+	regmap_write(lt9611->regmap, 0x831a, (u8)((hfront_porch / 256)<<4 + hsync_porch / 256));
 	regmap_write(lt9611->regmap, 0x831b, (u8)(hsync_porch % 256));
 }
 
-static void lt9611_pcr_setup(struct lt9611 *lt9611, const struct drm_display_mode *mode, unsigned int postdiv)
+static void lt9611_pcr_setup(struct lt9611 *lt9611, const struct drm_display_mode *mode)
 {
-	unsigned int pcr_m = mode->clock * 5 * postdiv / 27000;
 	const struct reg_sequence reg_cfg[] = {
 		{ 0x830b, 0x01 },
 		{ 0x830c, 0x10 },
@@ -186,51 +252,60 @@ static void lt9611_pcr_setup(struct lt9611 *lt9611, const struct drm_display_mod
 
 		/* stage 2 */
 		{ 0x834a, 0x40 },
+		// { 0x831d, 0x10 },
 
 		/* MK limit */
-		{ 0x832d, 0x38 },
+		{ 0x832d, 0x40 },
 		{ 0x8331, 0x08 },
+		
+		// ???
+		{0x831d, 0x10},
+	};
+	const struct reg_sequence reg_cfg2[] = {
+		{ 0x830b, 0x03 },
+		{ 0x830c, 0xd0 },
+		{ 0x8348, 0x03 },
+		{ 0x8349, 0xe0 },
+		{ 0x8324, 0x72 },
+		{ 0x8325, 0x00 },
+		{ 0x832a, 0x01 },
+		{ 0x834a, 0x10 },
+		{ 0x831d, 0x10 },
+		{ 0x8326, 0x37 },
 	};
-	u8 pol = 0x10;
-
-	if (mode->flags & DRM_MODE_FLAG_NHSYNC)
-		pol |= 0x2;
-	if (mode->flags & DRM_MODE_FLAG_NVSYNC)
-		pol |= 0x1;
-	regmap_write(lt9611->regmap, 0x831d, pol);
 
 	regmap_multi_reg_write(lt9611->regmap, reg_cfg, ARRAY_SIZE(reg_cfg));
-	if (lt9611->dsi1_node) {
-		unsigned int hact = mode->hdisplay;
-
-		hact >>= 2;
-		hact += 0x50;
-		hact = min(hact, 0x3e0U);
-		regmap_write(lt9611->regmap, 0x830b, hact / 256);
-		regmap_write(lt9611->regmap, 0x830c, hact % 256);
-		regmap_write(lt9611->regmap, 0x8348, hact / 256);
-		regmap_write(lt9611->regmap, 0x8349, hact % 256);
-	}
 
-	regmap_write(lt9611->regmap, 0x8326, pcr_m);
+	switch (mode->hdisplay) {
+	case 640:
+		regmap_write(lt9611->regmap, 0x8326, 0x14);
+		break;
+	case 1920:
+		regmap_write(lt9611->regmap, 0x8326, lt9611->pcr_m);
+		break;
+	case 3840:
+		regmap_multi_reg_write(lt9611->regmap, reg_cfg2, ARRAY_SIZE(reg_cfg2));
+		break;
+	}
 
 	/* pcr rst */
 	regmap_write(lt9611->regmap, 0x8011, 0x5a);
 	regmap_write(lt9611->regmap, 0x8011, 0xfa);
 }
 
-static int lt9611_pll_setup(struct lt9611 *lt9611, const struct drm_display_mode *mode, unsigned int *postdiv)
+static int lt9611_pll_setup(struct lt9611 *lt9611, const struct drm_display_mode *mode)
 {
 	unsigned int pclk = mode->clock;
+	u32 postdiv = 0;
 	const struct reg_sequence reg_cfg[] = {
 		/* txpll init */
 		{ 0x8123, 0x40 },
-		{ 0x8124, 0x64 },
+		{ 0x8124, 0x62 },
 		{ 0x8125, 0x80 },
 		{ 0x8126, 0x55 },
 		{ 0x812c, 0x37 },
 		{ 0x812f, 0x01 },
-		{ 0x8126, 0x55 },
+		// { 0x8126, 0x55 },
 		{ 0x8127, 0x66 },
 		{ 0x8128, 0x88 },
 		{ 0x812a, 0x20 },
@@ -240,31 +315,46 @@ static int lt9611_pll_setup(struct lt9611 *lt9611, const struct drm_display_mode
 
 	if (pclk > 150000) {
 		regmap_write(lt9611->regmap, 0x812d, 0x88);
-		*postdiv = 1;
-	} else if (pclk > 70000) {
+		postdiv = 1;
+	}
+	else if (pclk > 80000) {
 		regmap_write(lt9611->regmap, 0x812d, 0x99);
-		*postdiv = 2;
-	} else {
+		postdiv = 2;
+	}
+	else {
 		regmap_write(lt9611->regmap, 0x812d, 0xaa);
-		*postdiv = 4;
+		postdiv = 4;
 	}
 
+	lt9611->pcr_m = ((pclk * 5 * postdiv) / 27000) - 1;
+
+	regmap_write(lt9611->regmap, 0x832d, 0x40);
+	regmap_write(lt9611->regmap, 0x8331, 0x08);
+	regmap_write(lt9611->regmap, 0x8326, 0x80 | lt9611->pcr_m);
 	/*
 	 * first divide pclk by 2 first
 	 *  - write divide by 64k to 19:16 bits which means shift by 17
 	 *  - write divide by 256 to 15:8 bits which means shift by 9
 	 *  - write remainder to 7:0 bits, which means shift by 1
 	 */
-	regmap_write(lt9611->regmap, 0x82e3, pclk >> 17); /* pclk[19:16] */
-	regmap_write(lt9611->regmap, 0x82e4, pclk >> 9);  /* pclk[15:8]  */
-	regmap_write(lt9611->regmap, 0x82e5, pclk >> 1);  /* pclk[7:0]   */
+	pclk = pclk / 2;
+	regmap_write(lt9611->regmap, 0x82e3, pclk / 65536); /* pclk[19:16] */
+	pclk = pclk % 65536;
+	regmap_write(lt9611->regmap, 0x82e4, pclk / 256);  /* pclk[15:8]  */
+	regmap_write(lt9611->regmap, 0x82e5, pclk % 256);  /* pclk[7:0]   */
 
 	regmap_write(lt9611->regmap, 0x82de, 0x20);
 	regmap_write(lt9611->regmap, 0x82de, 0xe0);
 
-	regmap_write(lt9611->regmap, 0x8016, 0xf1);
-	regmap_write(lt9611->regmap, 0x8016, 0xf3);
+	regmap_write(lt9611->regmap, 0x8011, 0x5a);
+	regmap_write(lt9611->regmap, 0x8011, 0xfa);
+
+	regmap_write(lt9611->regmap, 0x8016, 0xf2);
 
+	regmap_write(lt9611->regmap, 0x8018, 0xdc);
+	regmap_write(lt9611->regmap, 0x8018, 0xfc);
+
+	regmap_write(lt9611->regmap, 0x8016, 0xf3);
 	return 0;
 }
 
@@ -332,55 +422,14 @@ static int lt9611_video_check(struct lt9611 *lt9611)
 	return temp;
 }
 
-static void lt9611_hdmi_set_infoframes(struct lt9611 *lt9611,
-				       struct drm_connector *connector,
-				       struct drm_display_mode *mode)
+static void lt9611_hdmi_tx_digital(struct lt9611 *lt9611)
 {
-	union hdmi_infoframe infoframe;
-	ssize_t len;
-	u8 iframes = 0x0a; /* UD1 infoframe */
-	u8 buf[32];
-	int ret;
-	int i;
-
-	ret = drm_hdmi_avi_infoframe_from_display_mode(&infoframe.avi,
-						       connector,
-						       mode);
-	if (ret < 0)
-		goto out;
-
-	len = hdmi_infoframe_pack(&infoframe, buf, sizeof(buf));
-	if (len < 0)
-		goto out;
-
-	for (i = 0; i < len; i++)
-		regmap_write(lt9611->regmap, 0x8440 + i, buf[i]);
-
-	ret = drm_hdmi_vendor_infoframe_from_display_mode(&infoframe.vendor.hdmi,
-							  connector,
-							  mode);
-	if (ret < 0)
-		goto out;
-
-	len = hdmi_infoframe_pack(&infoframe, buf, sizeof(buf));
-	if (len < 0)
-		goto out;
-
-	for (i = 0; i < len; i++)
-		regmap_write(lt9611->regmap, 0x8474 + i, buf[i]);
-
-	iframes |= 0x20;
-
-out:
-	regmap_write(lt9611->regmap, 0x843d, iframes); /* UD1 infoframe */
-}
+	regmap_write(lt9611->regmap, 0x8443, 0x21);
+	regmap_write(lt9611->regmap, 0x8445, 0x40);
+	regmap_write(lt9611->regmap, 0x8447, 0x34);
+	regmap_write(lt9611->regmap, 0x843d, 0x0a); /* UD1 infoframe */
 
-static void lt9611_hdmi_tx_digital(struct lt9611 *lt9611, bool is_hdmi)
-{
-	if (is_hdmi)
-		regmap_write(lt9611->regmap, 0x82d6, 0x8c);
-	else
-		regmap_write(lt9611->regmap, 0x82d6, 0x0c);
+	regmap_write(lt9611->regmap, 0x82d6, 0x8e);
 	regmap_write(lt9611->regmap, 0x82d7, 0x04);
 }
 
@@ -396,10 +445,10 @@ static void lt9611_hdmi_tx_phy(struct lt9611 *lt9611)
 		{ 0x8136, 0x00 },
 		{ 0x8137, 0x44 },
 		{ 0x813f, 0x0f },
-		{ 0x8140, 0xa0 },
-		{ 0x8141, 0xa0 },
-		{ 0x8142, 0xa0 },
-		{ 0x8143, 0xa0 },
+		{ 0x8140, 0x98 },
+		{ 0x8141, 0x98 },
+		{ 0x8142, 0x98 },
+		{ 0x8143, 0x98 },
 		{ 0x8144, 0x0a },
 	};
 
@@ -435,8 +484,8 @@ static irqreturn_t lt9611_irq_thread_handler(int irq, void *dev_id)
 		regmap_write(lt9611->regmap, 0x8207, 0x3f);
 	}
 
-	if (irq_flag3 & 0xc0 && lt9611->bridge.dev)
-		drm_kms_helper_hotplug_event(lt9611->bridge.dev);
+	//if (irq_flag3 & 0xc0 && lt9611->bridge.dev)
+		//drm_kms_helper_hotplug_event(lt9611->bridge.dev);
 
 	/* video input changed */
 	if (irq_flag0 & 0x01) {
@@ -469,11 +518,12 @@ static void lt9611_sleep_setup(struct lt9611 *lt9611)
 		{ 0x8023, 0x01 },
 		{ 0x8157, 0x03 }, /* set addr pin as output */
 		{ 0x8149, 0x0b },
-
+		{ 0x8151, 0x30 }, /* disable IRQ */
 		{ 0x8102, 0x48 }, /* MIPI Rx power down */
 		{ 0x8123, 0x80 },
 		{ 0x8130, 0x00 },
-		{ 0x8011, 0x0a },
+		{ 0x8100, 0x01 }, /* bandgap power down */
+		{ 0x8101, 0x00 }, /* system clk power down */
 	};
 
 	regmap_multi_reg_write(lt9611->regmap,
@@ -495,16 +545,16 @@ static int lt9611_power_on(struct lt9611 *lt9611)
 		{ 0x82cc, 0x78 },
 
 		/* irq init */
-		{ 0x8251, 0x01 },
+		{ 0x8251, 0x11 },
 		{ 0x8258, 0x0a }, /* hpd irq */
-		{ 0x8259, 0x80 }, /* hpd debounce width */
+		{ 0x8259, 0x00 }, /* hpd debounce width */
 		{ 0x829e, 0xf7 }, /* video check irq */
 
 		/* power consumption for work */
 		{ 0x8004, 0xf0 },
 		{ 0x8006, 0xf0 },
 		{ 0x800a, 0x80 },
-		{ 0x800b, 0x40 },
+		{ 0x800b, 0x46 },
 		{ 0x800d, 0xef },
 		{ 0x8011, 0xfa },
 	};
@@ -584,18 +634,35 @@ static int lt9611_regulator_enable(struct lt9611 *lt9611)
 	return 0;
 }
 
-static enum drm_connector_status lt9611_bridge_detect(struct drm_bridge *bridge)
+static struct lt9611_mode *lt9611_find_mode(const struct drm_display_mode *mode)
 {
-	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(lt9611_modes); i++) {
+		if (lt9611_modes[i].hdisplay == mode->hdisplay &&
+		    lt9611_modes[i].vdisplay == mode->vdisplay &&
+		    lt9611_modes[i].vrefresh == drm_mode_vrefresh(mode)) {
+			return &lt9611_modes[i];
+		}
+	}
+
+	return NULL;
+}
+
+/* connector funcs */
+static enum drm_connector_status
+lt9611_connector_detect(struct drm_connector *connector, bool force)
+{
+	struct lt9611 *lt9611 = connector_to_lt9611(connector);
 	unsigned int reg_val = 0;
 	int connected = 0;
 
 	regmap_read(lt9611->regmap, 0x825e, &reg_val);
-	connected  = (reg_val & (BIT(2) | BIT(0)));
+	connected  = (reg_val & BIT(2));
 
 	lt9611->status = connected ?  connector_status_connected :
 				connector_status_disconnected;
-
+	printk("lt9611_connect_detect %d\n", lt9611->status);
 	return lt9611->status;
 }
 
@@ -680,46 +747,44 @@ lt9611_get_edid_block(void *data, u8 *buf, unsigned int block, size_t len)
 	return 0;
 }
 
-/* bridge funcs */
-static void
-lt9611_bridge_atomic_enable(struct drm_bridge *bridge,
-			    struct drm_bridge_state *old_bridge_state)
+static int lt9611_connector_get_modes(struct drm_connector *connector)
 {
-	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
-	struct drm_atomic_state *state = old_bridge_state->base.state;
-	struct drm_connector *connector;
-	struct drm_connector_state *conn_state;
-	struct drm_crtc_state *crtc_state;
-	struct drm_display_mode *mode;
-	unsigned int postdiv;
-
-	connector = drm_atomic_get_new_connector_for_encoder(state, bridge->encoder);
-	if (WARN_ON(!connector))
-		return;
+	struct lt9611 *lt9611 = connector_to_lt9611(connector);
+	unsigned int count;
+	struct edid *edid;
 
-	conn_state = drm_atomic_get_new_connector_state(state, connector);
-	if (WARN_ON(!conn_state))
-		return;
+	printk("lt9611_connector_get_modes \n");
+	lt9611_power_on(lt9611);
+	edid = drm_do_get_edid(connector, lt9611_get_edid_block, lt9611);
+	drm_connector_update_edid_property(connector, edid);
+	count = drm_add_edid_modes(connector, edid);
+	kfree(edid);
 
-	crtc_state = drm_atomic_get_new_crtc_state(state, conn_state->crtc);
-	if (WARN_ON(!crtc_state))
-		return;
+	return count;
+}
 
-	mode = &crtc_state->adjusted_mode;
+static enum drm_mode_status
+lt9611_connector_mode_valid(struct drm_connector *connector,
+			    struct drm_display_mode *mode)
+{
+	struct lt9611_mode *lt9611_mode = lt9611_find_mode(mode);
 
-	lt9611_mipi_input_digital(lt9611, mode);
-	lt9611_pll_setup(lt9611, mode, &postdiv);
-	lt9611_mipi_video_setup(lt9611, mode);
-	lt9611_pcr_setup(lt9611, mode, postdiv);
+	return lt9611_mode ? MODE_OK : MODE_BAD;
+}
+
+/* bridge funcs */
+static void lt9611_bridge_enable(struct drm_bridge *bridge)
+{
+	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
 
+	printk("lt9611_bridge_enable \n");
 	if (lt9611_power_on(lt9611)) {
 		dev_err(lt9611->dev, "power on failed\n");
 		return;
 	}
 
 	lt9611_mipi_input_analog(lt9611);
-	lt9611_hdmi_set_infoframes(lt9611, connector, mode);
-	lt9611_hdmi_tx_digital(lt9611, connector->display_info.is_hdmi);
+	lt9611_hdmi_tx_digital(lt9611);
 	lt9611_hdmi_tx_phy(lt9611);
 
 	msleep(500);
@@ -727,16 +792,24 @@ lt9611_bridge_atomic_enable(struct drm_bridge *bridge,
 	lt9611_video_check(lt9611);
 
 	/* Enable HDMI output */
+	regmap_write(lt9611->regmap, 0x8123, 0x40);
+	regmap_write(lt9611->regmap, 0x82de, 0x20);
+	regmap_write(lt9611->regmap, 0x82de, 0xe0);
+	regmap_write(lt9611->regmap, 0x8018, 0xdc);
+	regmap_write(lt9611->regmap, 0x8018, 0xfc);
+	regmap_write(lt9611->regmap, 0x8016, 0xf1);
+	regmap_write(lt9611->regmap, 0x8016, 0xf3);
+	regmap_write(lt9611->regmap, 0x8011, 0x5a);
+	regmap_write(lt9611->regmap, 0x8011, 0xfa);
 	regmap_write(lt9611->regmap, 0x8130, 0xea);
 }
 
-static void
-lt9611_bridge_atomic_disable(struct drm_bridge *bridge,
-			     struct drm_bridge_state *old_bridge_state)
+static void lt9611_bridge_disable(struct drm_bridge *bridge)
 {
 	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
 	int ret;
 
+	printk("lt9611_bridge_disable \n");
 	/* Disable HDMI output */
 	ret = regmap_write(lt9611->regmap, 0x8130, 0x6a);
 	if (ret) {
@@ -750,20 +823,41 @@ lt9611_bridge_atomic_disable(struct drm_bridge *bridge,
 	}
 }
 
+static struct
+drm_connector_helper_funcs lt9611_bridge_connector_helper_funcs = {
+	.get_modes = lt9611_connector_get_modes,
+	.mode_valid = lt9611_connector_mode_valid,
+};
+
+static const struct drm_connector_funcs lt9611_bridge_connector_funcs = {
+	.fill_modes = drm_helper_probe_single_connector_modes,
+	.detect = lt9611_connector_detect,
+	.destroy = drm_connector_cleanup,
+	.reset = drm_atomic_helper_connector_reset,
+	.atomic_duplicate_state = drm_atomic_helper_connector_duplicate_state,
+	.atomic_destroy_state = drm_atomic_helper_connector_destroy_state,
+};
+
 static struct mipi_dsi_device *lt9611_attach_dsi(struct lt9611 *lt9611,
 						 struct device_node *dsi_node)
 {
-	const struct mipi_dsi_device_info info = { "lt9611", 0, lt9611->dev->of_node};
+	const struct mipi_dsi_device_info info = { .type = "lt9611",
+							.channel = 0,
+							.node = NULL,
+						};
 	struct mipi_dsi_device *dsi;
 	struct mipi_dsi_host *host;
-	struct device *dev = lt9611->dev;
 	int ret;
 
+	printk("lt9611_attach_dsi \n");
 	host = of_find_mipi_dsi_host_by_node(dsi_node);
-	if (!host)
-		return ERR_PTR(dev_err_probe(lt9611->dev, -EPROBE_DEFER, "failed to find dsi host\n"));
+	if (!host) {
+		dev_err(lt9611->dev, "failed to find dsi host\n");
+		return ERR_PTR(-EPROBE_DEFER);
+	}
+	of_node_put(dsi_node);
 
-	dsi = devm_mipi_dsi_device_register_full(dev, host, &info);
+	dsi = mipi_dsi_device_register_full(host, &info);
 	if (IS_ERR(dsi)) {
 		dev_err(lt9611->dev, "failed to create dsi device\n");
 		return dsi;
@@ -774,149 +868,207 @@ static struct mipi_dsi_device *lt9611_attach_dsi(struct lt9611 *lt9611,
 	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_SYNC_PULSE |
 			  MIPI_DSI_MODE_VIDEO_HSE;
 
-	ret = devm_mipi_dsi_attach(dev, dsi);
+	ret = mipi_dsi_attach(dsi);
 	if (ret < 0) {
-		dev_err(dev, "failed to attach dsi to host\n");
+		dev_err(lt9611->dev, "failed to attach dsi to host\n");
+		mipi_dsi_device_unregister(dsi);
 		return ERR_PTR(ret);
 	}
 
 	return dsi;
 }
 
-static int lt9611_bridge_attach(struct drm_bridge *bridge,
-				enum drm_bridge_attach_flags flags)
+static void lt9611_bridge_detach(struct drm_bridge *bridge)
 {
 	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
 
-	return drm_bridge_attach(bridge->encoder, lt9611->next_bridge,
-				 bridge, flags);
+	if (lt9611->dsi1) {
+		mipi_dsi_detach(lt9611->dsi1);
+		mipi_dsi_device_unregister(lt9611->dsi1);
+	}
+
+	mipi_dsi_detach(lt9611->dsi0);
+	mipi_dsi_device_unregister(lt9611->dsi0);
 }
 
-static enum drm_mode_status lt9611_bridge_mode_valid(struct drm_bridge *bridge,
-						     const struct drm_display_info *info,
-						     const struct drm_display_mode *mode)
+static int lt9611_connector_init(struct drm_bridge *bridge, struct lt9611 *lt9611)
+{
+	int ret;
+	printk("%s:%d\n", __func__, __LINE__);
+	ret = drm_connector_init(bridge->dev, &lt9611->connector,
+				 &lt9611_bridge_connector_funcs,
+				 DRM_MODE_CONNECTOR_HDMIA);
+	if (ret) {
+		DRM_ERROR("Failed to initialize connector with drm\n");
+		return ret;
+	}
+
+	drm_connector_helper_add(&lt9611->connector,
+				 &lt9611_bridge_connector_helper_funcs);
+	drm_connector_attach_encoder(&lt9611->connector, bridge->encoder);
+	if (!bridge->encoder) {
+		DRM_ERROR("Parent encoder object not found");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+static int lt9611_bridge_attach(struct drm_bridge *bridge, enum drm_bridge_attach_flags flags)
 {
 	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
+	int ret;
+
+	//if (!(flags & DRM_BRIDGE_ATTACH_NO_CONNECTOR)) {
+		ret = lt9611_connector_init(bridge, lt9611);
+		if (ret < 0)
+			return ret;
+	//}
+
+	/* Attach primary DSI */
+	if (lt9611->dsi0_node) {
+		lt9611->dsi0 = lt9611_attach_dsi(lt9611, lt9611->dsi0_node);
+		if (IS_ERR(lt9611->dsi0))
+			return PTR_ERR(lt9611->dsi0);
+	}
+
+	/* Attach secondary DSI, if specified */
+	if (lt9611->dsi1_node) {
+		lt9611->dsi1 = lt9611_attach_dsi(lt9611, lt9611->dsi1_node);
+		if (IS_ERR(lt9611->dsi1)) {
+			ret = PTR_ERR(lt9611->dsi1);
+			goto err_unregister_dsi0;
+		}
+	}
+
+	return 0;
 
-	if (mode->hdisplay > 3840)
-		return MODE_BAD_HVALUE;
+err_unregister_dsi0:
+	lt9611_bridge_detach(bridge);
+	drm_connector_cleanup(&lt9611->connector);
+	mipi_dsi_device_unregister(lt9611->dsi0);
 
-	if (mode->vdisplay > 2160)
-		return MODE_BAD_VVALUE;
+	return ret;
+}
 
-	if (mode->hdisplay == 3840 &&
-	    mode->vdisplay == 2160 &&
-	    drm_mode_vrefresh(mode) > 30)
-		return MODE_CLOCK_HIGH;
+static enum drm_mode_status lt9611_bridge_mode_valid(struct drm_bridge *bridge,
+							const struct drm_display_info* info,
+						     const struct drm_display_mode *mode)
+{
+	struct lt9611_mode *lt9611_mode = lt9611_find_mode(mode);
+	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
 
-	if (mode->hdisplay > 2000 && !lt9611->dsi1_node)
+	if (!lt9611_mode) {
+		return MODE_BAD;
+	} else if (lt9611_mode->intfs > 1 && !lt9611->dsi1) {
 		return MODE_PANEL;
-	else
+	} else {
 		return MODE_OK;
+	}
 }
 
-static void lt9611_bridge_atomic_pre_enable(struct drm_bridge *bridge,
-					    struct drm_bridge_state *old_bridge_state)
+static void lt9611_bridge_pre_enable(struct drm_bridge *bridge)
 {
 	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
-	static const struct reg_sequence reg_cfg[] = {
-		{ 0x8102, 0x12 },
-		{ 0x8123, 0x40 },
-		{ 0x8130, 0xea },
-		{ 0x8011, 0xfa },
-	};
 
 	if (!lt9611->sleep)
 		return;
 
-	regmap_multi_reg_write(lt9611->regmap,
-			       reg_cfg, ARRAY_SIZE(reg_cfg));
+	lt9611_reset(lt9611);
+	regmap_write(lt9611->regmap, 0x80ee, 0x01);
 
 	lt9611->sleep = false;
 }
 
-static void
-lt9611_bridge_atomic_post_disable(struct drm_bridge *bridge,
-				  struct drm_bridge_state *old_bridge_state)
+static void lt9611_bridge_post_disable(struct drm_bridge *bridge)
 {
 	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
 
 	lt9611_sleep_setup(lt9611);
 }
 
-static struct edid *lt9611_bridge_get_edid(struct drm_bridge *bridge,
-					   struct drm_connector *connector)
+static void lt9611_bridge_mode_set(struct drm_bridge *bridge,
+				   const struct drm_display_mode *mode,
+				   const struct drm_display_mode *adj_mode)
 {
 	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
+	struct hdmi_avi_infoframe avi_frame;
+	int ret;
 
-	lt9611_power_on(lt9611);
-	return drm_do_get_edid(connector, lt9611_get_edid_block, lt9611);
-}
+	printk("adj_mode hdisplay %d\n", adj_mode->hdisplay);
+	printk("adj_mode vdisplay %d\n", adj_mode->vdisplay);
+	printk("adj_mode clock %d\n", adj_mode->clock);
+	printk("adj_mode crtc_hdisplay %d\n", adj_mode->crtc_hdisplay);
+	printk("adj_mode crtc_vdisplay %d\n", adj_mode->crtc_vdisplay);
+	printk("adj_mode crtc_clock %d\n", adj_mode->crtc_clock);
+	lt9611_bridge_pre_enable(bridge);
 
-static void lt9611_bridge_hpd_enable(struct drm_bridge *bridge)
-{
-	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
+	lt9611_mipi_input_digital(lt9611, mode);
+	lt9611_pll_setup(lt9611, mode);
+	lt9611_pcr_setup(lt9611, mode);
+	lt9611_mipi_video_setup(lt9611, mode);
+	drm_mode_copy(&lt9611->mode, mode);
 
-	lt9611_enable_hpd_interrupts(lt9611);
+	ret = drm_hdmi_avi_infoframe_from_display_mode(&avi_frame,
+						       &lt9611->connector,
+						       adj_mode);
+	
+	if (!ret)
+		lt9611->vic = avi_frame.video_code;
 }
 
-#define MAX_INPUT_SEL_FORMATS	1
-
-static u32 *
-lt9611_atomic_get_input_bus_fmts(struct drm_bridge *bridge,
-				 struct drm_bridge_state *bridge_state,
-				 struct drm_crtc_state *crtc_state,
-				 struct drm_connector_state *conn_state,
-				 u32 output_fmt,
-				 unsigned int *num_input_fmts)
+static enum drm_connector_status lt9611_bridge_detect(struct drm_bridge *bridge)
 {
-	u32 *input_fmts;
+	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
+	unsigned int reg_val = 0;
+	int connected;
 
-	*num_input_fmts = 0;
+	regmap_read(lt9611->regmap, 0x825e, &reg_val);
+	connected  = reg_val & BIT(2);
 
-	input_fmts = kcalloc(MAX_INPUT_SEL_FORMATS, sizeof(*input_fmts),
-			     GFP_KERNEL);
-	if (!input_fmts)
-		return NULL;
+	lt9611->status = connected ?  connector_status_connected :
+				connector_status_disconnected;
+
+	return lt9611->status;
+}
 
-	/* This is the DSI-end bus format */
-	input_fmts[0] = MEDIA_BUS_FMT_RGB888_1X24;
-	*num_input_fmts = 1;
+static void lt9611_bridge_hpd_enable(struct drm_bridge *bridge)
+{
+	struct lt9611 *lt9611 = bridge_to_lt9611(bridge);
 
-	return input_fmts;
+	lt9611_enable_hpd_interrupts(lt9611);
 }
 
 static const struct drm_bridge_funcs lt9611_bridge_funcs = {
 	.attach = lt9611_bridge_attach,
+	.detach = lt9611_bridge_detach,
 	.mode_valid = lt9611_bridge_mode_valid,
-	.detect = lt9611_bridge_detect,
-	.get_edid = lt9611_bridge_get_edid,
-	.hpd_enable = lt9611_bridge_hpd_enable,
-
-	.atomic_pre_enable = lt9611_bridge_atomic_pre_enable,
-	.atomic_enable = lt9611_bridge_atomic_enable,
-	.atomic_disable = lt9611_bridge_atomic_disable,
-	.atomic_post_disable = lt9611_bridge_atomic_post_disable,
-	.atomic_duplicate_state = drm_atomic_helper_bridge_duplicate_state,
-	.atomic_destroy_state = drm_atomic_helper_bridge_destroy_state,
-	.atomic_reset = drm_atomic_helper_bridge_reset,
-	.atomic_get_input_bus_fmts = lt9611_atomic_get_input_bus_fmts,
+	.enable = lt9611_bridge_enable,
+	.disable = lt9611_bridge_disable,
+	.post_disable = lt9611_bridge_post_disable,
+	.mode_set = lt9611_bridge_mode_set,
+	//.detect = lt9611_bridge_detect,
+	//.get_edid = lt9611_bridge_get_edid,
+	//.hpd_enable = lt9611_bridge_hpd_enable,
 };
 
 static int lt9611_parse_dt(struct device *dev,
 			   struct lt9611 *lt9611)
 {
+	struct device_node *np = dev->of_node;
+	struct device_node *node, *np1;
 	lt9611->dsi0_node = of_graph_get_remote_node(dev->of_node, 0, -1);
-	if (!lt9611->dsi0_node) {
-		dev_err(lt9611->dev, "failed to get remote node for primary dsi\n");
+	lt9611->dsi1_node = of_graph_get_remote_node(dev->of_node, 1, -1);
+	if (!lt9611->dsi0_node && !lt9611->dsi1_node) {
+		dev_err(lt9611->dev, "failed to get remote node for dsi\n");
 		return -ENODEV;
 	}
 
-	lt9611->dsi1_node = of_graph_get_remote_node(dev->of_node, 1, -1);
+	//lt9611->dsi1_node = of_graph_get_remote_node(dev->of_node, 1, -1);
 
 	lt9611->ac_mode = of_property_read_bool(dev->of_node, "lt,ac-mode");
 
-	return drm_of_find_panel_or_bridge(dev->of_node, 2, -1, NULL, &lt9611->next_bridge);
+	return 0;
 }
 
 static int lt9611_gpio_init(struct lt9611 *lt9611)
@@ -929,12 +1081,12 @@ static int lt9611_gpio_init(struct lt9611 *lt9611)
 		return PTR_ERR(lt9611->reset_gpio);
 	}
 
-	lt9611->enable_gpio = devm_gpiod_get_optional(dev, "enable",
-						      GPIOD_OUT_LOW);
-	if (IS_ERR(lt9611->enable_gpio)) {
-		dev_err(dev, "failed to acquire enable gpio\n");
-		return PTR_ERR(lt9611->enable_gpio);
-	}
+	//lt9611->enable_gpio = devm_gpiod_get_optional(dev, "enable",
+	//					      GPIOD_OUT_LOW);
+	//if (IS_ERR(lt9611->enable_gpio)) {
+	//	dev_err(dev, "failed to acquire enable gpio\n");
+	//	return PTR_ERR(lt9611->enable_gpio);
+	//}
 
 	return 0;
 }
@@ -944,8 +1096,12 @@ static int lt9611_read_device_rev(struct lt9611 *lt9611)
 	unsigned int rev;
 	int ret;
 
-	regmap_write(lt9611->regmap, 0x80ee, 0x01);
-	ret = regmap_read(lt9611->regmap, 0x8002, &rev);
+	ret = regmap_write(lt9611->regmap, 0x80ee, 0x01);
+	printk("ret %d\n", ret);
+	ret = regmap_read(lt9611->regmap, 0x8000, &rev);
+	printk("LT9611 rev1 %02x\n", rev);
+	ret = regmap_read(lt9611->regmap, 0x8001, &rev);
+	printk("LT9611 ret %d rev1 %02x\n", ret, rev);
 	if (ret)
 		dev_err(lt9611->dev, "failed to read revision: %d\n", ret);
 	else
@@ -954,117 +1110,24 @@ static int lt9611_read_device_rev(struct lt9611 *lt9611)
 	return ret;
 }
 
-static int lt9611_hdmi_hw_params(struct device *dev, void *data,
-				 struct hdmi_codec_daifmt *fmt,
-				 struct hdmi_codec_params *hparms)
-{
-	struct lt9611 *lt9611 = data;
-
-	if (hparms->sample_rate == 48000)
-		regmap_write(lt9611->regmap, 0x840f, 0x2b);
-	else if (hparms->sample_rate == 96000)
-		regmap_write(lt9611->regmap, 0x840f, 0xab);
-	else
-		return -EINVAL;
-
-	regmap_write(lt9611->regmap, 0x8435, 0x00);
-	regmap_write(lt9611->regmap, 0x8436, 0x18);
-	regmap_write(lt9611->regmap, 0x8437, 0x00);
-
-	return 0;
-}
-
-static int lt9611_audio_startup(struct device *dev, void *data)
-{
-	struct lt9611 *lt9611 = data;
-
-	regmap_write(lt9611->regmap, 0x82d6, 0x8c);
-	regmap_write(lt9611->regmap, 0x82d7, 0x04);
-
-	regmap_write(lt9611->regmap, 0x8406, 0x08);
-	regmap_write(lt9611->regmap, 0x8407, 0x10);
-
-	regmap_write(lt9611->regmap, 0x8434, 0xd5);
-
-	return 0;
-}
-
-static void lt9611_audio_shutdown(struct device *dev, void *data)
-{
-	struct lt9611 *lt9611 = data;
-
-	regmap_write(lt9611->regmap, 0x8406, 0x00);
-	regmap_write(lt9611->regmap, 0x8407, 0x00);
-}
-
-static int lt9611_hdmi_i2s_get_dai_id(struct snd_soc_component *component,
-				      struct device_node *endpoint)
-{
-	struct of_endpoint of_ep;
-	int ret;
-
-	ret = of_graph_parse_endpoint(endpoint, &of_ep);
-	if (ret < 0)
-		return ret;
-
-	/*
-	 * HDMI sound should be located as reg = <2>
-	 * Then, it is sound port 0
-	 */
-	if (of_ep.port == 2)
-		return 0;
-
-	return -EINVAL;
-}
-
-static const struct hdmi_codec_ops lt9611_codec_ops = {
-	.hw_params	= lt9611_hdmi_hw_params,
-	.audio_shutdown = lt9611_audio_shutdown,
-	.audio_startup	= lt9611_audio_startup,
-	.get_dai_id	= lt9611_hdmi_i2s_get_dai_id,
-};
-
-static struct hdmi_codec_pdata codec_data = {
-	.ops = &lt9611_codec_ops,
-	.max_i2s_channels = 8,
-	.i2s = 1,
-};
-
-static int lt9611_audio_init(struct device *dev, struct lt9611 *lt9611)
-{
-	codec_data.data = lt9611;
-	lt9611->audio_pdev =
-		platform_device_register_data(dev, HDMI_CODEC_DRV_NAME,
-					      PLATFORM_DEVID_AUTO,
-					      &codec_data, sizeof(codec_data));
-
-	return PTR_ERR_OR_ZERO(lt9611->audio_pdev);
-}
-
-static void lt9611_audio_exit(struct lt9611 *lt9611)
-{
-	if (lt9611->audio_pdev) {
-		platform_device_unregister(lt9611->audio_pdev);
-		lt9611->audio_pdev = NULL;
-	}
-}
-
 static int lt9611_probe(struct i2c_client *client)
 {
 	struct lt9611 *lt9611;
 	struct device *dev = &client->dev;
 	int ret;
 
+	printk("lt9611_probe success \n");
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		dev_err(dev, "device doesn't support I2C\n");
 		return -ENODEV;
 	}
+	printk("lt9611 check success \n");
 
 	lt9611 = devm_kzalloc(dev, sizeof(*lt9611), GFP_KERNEL);
 	if (!lt9611)
 		return -ENOMEM;
 
-	lt9611->dev = dev;
+	lt9611->dev = &client->dev;
 	lt9611->client = client;
 	lt9611->sleep = false;
 
@@ -1073,34 +1136,38 @@ static int lt9611_probe(struct i2c_client *client)
 		dev_err(lt9611->dev, "regmap i2c init failed\n");
 		return PTR_ERR(lt9611->regmap);
 	}
+	printk("regmap_init success \n");
 
-	ret = lt9611_parse_dt(dev, lt9611);
+	ret = lt9611_parse_dt(&client->dev, lt9611);
 	if (ret) {
 		dev_err(dev, "failed to parse device tree\n");
 		return ret;
 	}
+	printk("lt9611_parse success \n");
 
 	ret = lt9611_gpio_init(lt9611);
-	if (ret < 0)
-		goto err_of_put;
+	//if (ret < 0)
+		//goto err_of_put;
 
-	ret = lt9611_regulator_init(lt9611);
-	if (ret < 0)
-		goto err_of_put;
+	//ret = lt9611_regulator_init(lt9611);
+	//if (ret < 0)
+		//goto err_of_put;
 
-	lt9611_assert_5v(lt9611);
+	//lt9611_assert_5v(lt9611);
 
-	ret = lt9611_regulator_enable(lt9611);
-	if (ret)
-		goto err_of_put;
+	//ret = lt9611_regulator_enable(lt9611);
+	//if (ret)
+		//goto err_of_put;
 
 	lt9611_reset(lt9611);
+	printk("lt9611_reset success \n");
 
 	ret = lt9611_read_device_rev(lt9611);
 	if (ret) {
 		dev_err(dev, "failed to read chip rev\n");
 		goto err_disable_regulators;
 	}
+	printk("lt9611_read_device success \n");
 
 	ret = devm_request_threaded_irq(dev, client->irq, NULL,
 					lt9611_irq_thread_handler,
@@ -1109,43 +1176,22 @@ static int lt9611_probe(struct i2c_client *client)
 		dev_err(dev, "failed to request irq\n");
 		goto err_disable_regulators;
 	}
+	printk("lt9611_irq success \n");
 
 	i2c_set_clientdata(client, lt9611);
 
 	lt9611->bridge.funcs = &lt9611_bridge_funcs;
 	lt9611->bridge.of_node = client->dev.of_node;
-	lt9611->bridge.ops = DRM_BRIDGE_OP_DETECT | DRM_BRIDGE_OP_EDID |
-			     DRM_BRIDGE_OP_HPD | DRM_BRIDGE_OP_MODES;
-	lt9611->bridge.type = DRM_MODE_CONNECTOR_HDMIA;
+	//lt9611->bridge.ops = DRM_BRIDGE_OP_DETECT | DRM_BRIDGE_OP_EDID |
+	//		     DRM_BRIDGE_OP_HPD | DRM_BRIDGE_OP_MODES;
+	//lt9611->bridge.type = DRM_MODE_CONNECTOR_HDMIA;
 
 	drm_bridge_add(&lt9611->bridge);
-
-	/* Attach primary DSI */
-	lt9611->dsi0 = lt9611_attach_dsi(lt9611, lt9611->dsi0_node);
-	if (IS_ERR(lt9611->dsi0)) {
-		ret = PTR_ERR(lt9611->dsi0);
-		goto err_remove_bridge;
-	}
-
-	/* Attach secondary DSI, if specified */
-	if (lt9611->dsi1_node) {
-		lt9611->dsi1 = lt9611_attach_dsi(lt9611, lt9611->dsi1_node);
-		if (IS_ERR(lt9611->dsi1)) {
-			ret = PTR_ERR(lt9611->dsi1);
-			goto err_remove_bridge;
-		}
-	}
+	printk("drm_biidge succss ");
 
 	lt9611_enable_hpd_interrupts(lt9611);
-
-	ret = lt9611_audio_init(dev, lt9611);
-	if (ret)
-		goto err_remove_bridge;
-
 	return 0;
 
-err_remove_bridge:
-	drm_bridge_remove(&lt9611->bridge);
 
 err_disable_regulators:
 	regulator_bulk_disable(ARRAY_SIZE(lt9611->supplies), lt9611->supplies);
@@ -1162,7 +1208,7 @@ static void lt9611_remove(struct i2c_client *client)
 	struct lt9611 *lt9611 = i2c_get_clientdata(client);
 
 	disable_irq(client->irq);
-	lt9611_audio_exit(lt9611);
+	//lt9611_audio_exit(lt9611);
 	drm_bridge_remove(&lt9611->bridge);
 
 	regulator_bulk_disable(ARRAY_SIZE(lt9611->supplies), lt9611->supplies);
@@ -1171,27 +1217,44 @@ static void lt9611_remove(struct i2c_client *client)
 	of_node_put(lt9611->dsi0_node);
 }
 
-static struct i2c_device_id lt9611_id[] = {
+static const struct i2c_device_id lt9611_id[] = {
 	{ "lontium,lt9611", 0 },
 	{}
 };
 MODULE_DEVICE_TABLE(i2c, lt9611_id);
 
+#ifdef CONFIG_OF
 static const struct of_device_id lt9611_match_table[] = {
-	{ .compatible = "lontium,lt9611" },
+	{ .compatible = "lontium,lt9611", },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, lt9611_match_table);
+#endif
 
 static struct i2c_driver lt9611_driver = {
 	.driver = {
 		.name = "lt9611",
-		.of_match_table = lt9611_match_table,
+		.of_match_table =of_match_ptr(lt9611_match_table),
 	},
 	.probe = lt9611_probe,
 	.remove = lt9611_remove,
 	.id_table = lt9611_id,
 };
-module_i2c_driver(lt9611_driver);
 
+static int __init lt9611_init(void)
+{
+	printk("i2c_add_driver start \n");
+	return i2c_add_driver(&lt9611_driver);
+}
+
+static void __exit lt9611_exit(void)
+{
+	return i2c_del_driver(&lt9611_driver);
+}
+
+module_init(lt9611_init);
+module_exit(lt9611_exit);
+
+MODULE_DESCRIPTION("lontium bridge driver");
+MODULE_AUTHOR("lontium driver");
 MODULE_LICENSE("GPL v2");
-- 
2.46.0

