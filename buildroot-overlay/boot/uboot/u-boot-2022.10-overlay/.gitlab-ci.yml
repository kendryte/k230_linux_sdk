variables:
    GIT_DEPTH: 1
    CONF: k230_evb_defconfig
    REPO_VER: UBOOT_VERSION
    REPO_DIR: src/little/uboot/
    REPO_TARGET: uboot
    OUT_PATH: output/${CONF}/little/uboot
    OUT_FILE: u-boot.bin

default:
  image: ai.b-bug.org:5000/k230_sdk:latest

stages:
  - build

build:
  variables:
    DST_DIR: /data1/k230/gitlab-ci/images/${CI_PROJECT_NAME}
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  extends:
    - .build_common
    - .build_image
    - .save_image

.build_common:
  stage: build
  timeout: 4m
  tags:
    - k230_sdk
  artifacts:
      name: "$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
      paths:
      - k230_sdk/${OUT_PATH}/${OUT_FILE}
      - k230_sdk/${OUT_PATH}/version
      expire_in: 15 days

.build_image:
  script:
    - echo "----------ENV Check----------"
    - whoami
    - hostname
    - uptime
    - pwd
    - ls
    - uname -a
    - ls
    - echo "----------switch work dir to main repo----------"
    - cd $CI_PROJECT_DIR/k230_sdk/ || exit 1
    - ls
    - echo "----------skip toolchain download in local docker----------"
    - mkdir toolchain && touch toolchain/.toolchain_ready
    - ls toolchain/.toolchain_ready || exit 1
    - echo "----------download sub repo source code----------"
    - source tools/get_download_url.sh
    - time make prepare_sourcecode || exit 1
    - echo "----------manual Check and cofirm buildroot git version again----------"
    - cd ${REPO_DIR}
    - git status
    - git rev-parse HEAD || exit 1
    - cur_id=$(git rev-parse HEAD)
    - >
      if [[ "$cur_id" == "$new_id" ]];
      then
        echo "commit id check3 pass: current source code commit id is equal to current commit id, will start build job";
      else
        if [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "dev" ]];
        then
          echo "current git commit id is : $cur_id"
          echo "test repo.mak file commit id is : $new_id"
          echo "ERROR: current source code commit id is not equal to current MR commit id, SKIP and EXIT with error";
          exit 1;
        else
          echo "source branch is : $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
          echo "target branch is : $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
          echo "current git commit id is : $cur_id"
          echo "test repo.mak file commit id is : $new_id"
          echo "skip commit id match as it only works in dev branch, continue to run CI job"
        fi
        echo "current commit id is not match with repo commit id, continue to run CI job"
      fi
    - cd $CI_PROJECT_DIR/k230_sdk/ || exit 1
    - pwd
    - echo "----------build image----------"
    - make ${REPO_TARGET} || exit 1
    - echo "----------show build output----------"
    - pwd
    - du -h -d 2 output/${CONF}/ || exit 1
    - ls -alht ${OUT_PATH} || exit 1
    - ls -alht ${OUT_PATH}/${OUT_FILE} || exit 1

.save_image:
  variables:
    SRC_DIR: ${OUT_PATH}
  after_script:
    - pwd
    - cd $CI_PROJECT_DIR/k230_sdk/ || exit 1
    - echo ${DST_DIR}
    - echo "---create repo dir---"
    - sudo mkdir -p ${DST_DIR} || exit 1
    - ls ${DST_DIR} || exit 1
    - echo "----------Save version file to ${SRC_DIR}----------"
    - commitid="unkonwn"
    - latest_tag="unkonwn"
    - git rev-parse --short HEAD  &&  commitid=$(git rev-parse --short HEAD)
    - git describe --tags `git rev-list --tags --max-count=1` && latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
    - hostname
    - whoami
    - cur_date=$(date "+%Y%m%d-%H%M%S") || exit 1
    - echo ${cur_date}
    - ver="${latest_tag}-${cur_date}-$(whoami)-$(hostname)-${commitid}" || exit 1
    - echo ${ver}
    - echo -e ${ver} >> ${SRC_DIR}/version || exit 1
    - ls -alht ${SRC_DIR}/version || exit 1
    - cat ${SRC_DIR}/version || exit 1
    - echo "----------Save build to external path----------"
    - echo "---curren sdk version:"
    - echo ${ver}
    - >
      if [[ $CI_COMMIT_TAG =~ /^v\d+.*$/ ]];
      then
        echo "release tag exist, will replace version dir with tag";
        ver=$CI_COMMIT_TAG;
        echo "ver/tag is : ${ver}";
      else
        echo "tag is null, skip ver overwrite";
      fi
    - echo "---create sdk version dir---"
    - sudo mkdir -p ${DST_DIR}/${ver}/${CONF}/ || exit 1
    - echo "---save sdk build output---"
    - sudo cp -rf ${SRC_DIR}/ ${DST_DIR}/${ver}/${CONF}/ || exit 1
    - ls -alht ${DST_DIR}/${ver}/${CONF}/ || exit 1
    - echo "add latest link for current build"
    - test -d ${DST_DIR}/latest && sudo rm ${DST_DIR}/latest
    - sudo ln -s ${DST_DIR}/${ver} ${DST_DIR}/latest || exit 1
    - ls ${DST_DIR}/latest || exit 1

before_script:
  - echo '----------Build ENV Prepare----------'
  - echo 'Add SSH KEY for Multiple repo clone in Makefile'
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_PRIVATE_KEY" | ssh-add - > ~/.ssh/id_ed25519 || exit 1
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - echo $SHELL
  - whoami
  - uptime
  - pwd
  - ls /
  - ls ${DST_DIR}
  - uname -a
  - cat /etc/issue
  - echo $CI_PROJECT_DIR
  - echo $CI_PROJECT_NAME
  - echo '----------Set temp config for git----------'
  - echo "${GITLAB_USER_EMAIL}"
  - echo "${GITLAB_USER_NAME}"
  - git config --global user.email "${GITLAB_USER_EMAIL}"
  - git config --global user.name "${GITLAB_USER_NAME}"
  - git config --global --add safe.directory $CI_PROJECT_DIR
  - echo '----------show current changes commit id----------'
  - echo $CI_COMMIT_SHORT_SHA
  - echo $CI_COMMIT_SHA
  - echo '----------clone main repo and all source code----------'
  - cd $CI_PROJECT_DIR
  - git clone git@g.a-bug.org:maix_sw/k230_sdk.git || exit 1
  - echo '----------switch to main repo dir----------'
  - cd k230_sdk || exit 1
  - git pull origin dev || exit 1
  - git checkout dev || exit 1
  - echo "----------check sub repo commit id before update----------"
  - cat repo.mak |grep ${REPO_VER} || exit 1
  - cat repo.mak |grep ${REPO_VER} | sed -E 's/'"${REPO_VER}"'\ *=\ *"(\w{40})"/\1/g' || exit 1
  - old_id=$(cat repo.mak |grep ${REPO_VER} | sed -E 's/'"${REPO_VER}"'\ *=\ *"(\w{40})"/\1/g')
  - echo $old_id
  - echo '----------manual update current commit id to main repo----------'
  - cat repo.mak |grep ${REPO_VER}
  - sed -i "s/$old_id/$CI_COMMIT_SHA/g" repo.mak || exit 1
  - cat repo.mak |grep ${REPO_VER} || exit 1
  - cat repo.mak |grep ${REPO_VER} | sed -E 's/'"${REPO_VER}"'\ *=\ *"(\w{40})"/\1/g' || exit 1
  - new_id=$(cat repo.mak |grep ${REPO_VER} | sed -E 's/'"${REPO_VER}"'\ *=\ *"(\w{40})"/\1/g')
  - echo $new_id
  - >
      if [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "dev" ]];
        then
          echo "check1:  old repo.mak commit id and new repo.mak commit id";
          if [[ "$old_id" == "$new_id" ]];
            then
                echo "ERROR: old commit id is equal to new commit id, SKIP and EXIT with error";
                exit 1;
            else
                echo "commit id check1 pass: old commit id NOT equal to new commit id, will continue to do check";
          fi
          echo "check2:  new repo.mak commit id and current MR commit id";
          if [[ "$CI_COMMIT_SHA" == "$new_id" ]];
            then
                echo "commit id check2 pass: current MR commit id is equal to new commit id, will start build job";
          else
                echo "ERROR: old commit id is NOT equal to new commit id, SKIP and EXIT with error";
                exit 1;
          fi
          echo "dev branch commit id check pass";
      else
          echo "target branch not dev branch, SKIP commit id check, continue to run CI job";
      fi

